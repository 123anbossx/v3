{"code":"import { mutableHandlers, readonlyHandlers, shallowReactiveHandlers, shallowReadonlyHandlers } from \"./baseHandlers\";\nimport { isObject } from \"@vue/shared\";\n// 记录当前被代理的对象\nexport const reactiveMap = new WeakMap();\nexport const readonlyMap = new WeakMap();\nexport const shallowReactiveMap = new WeakMap();\nexport const shallowReadonlyMap = new WeakMap();\n// 实现代理的核心\nfunction createReactiveObject(target, isReadonly = false, basehanders, proxyMap) {\n    // 是不是对象\n    if (!isObject(target)) {\n        console.warn(`target ${target} 必须是一个对象`);\n        return target;\n    }\n    if (proxyMap.get(target)) {\n        return target;\n    }\n    // 处理代理以及收集依赖\n    const proxy = new Proxy(target, basehanders);\n    proxyMap.set(target, proxy);\n    return proxy;\n}\nexport function reactive(target) {\n    return createReactiveObject(target, false, mutableHandlers, reactiveMap);\n}\nexport function readonly(target) {\n    return createReactiveObject(target, true, readonlyHandlers, readonlyMap);\n}\nexport function shallowReactive(target) {\n    return createReactiveObject(target, false, shallowReactiveHandlers, shallowReactiveMap);\n}\nexport function shallowReadonly(target) {\n    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyMap);\n}\n","references":["/Users/mima0000/workspace/sourceCode/vue3/vue3-test/packages/reactivity/src/baseHandlers.ts","/Users/mima0000/workspace/sourceCode/vue3/vue3-test/packages/shared/src/index.ts"]}
